service: aml-backend


provider:
  name: aws
  runtime: nodejs18.x
  stage: staging
  region: eu-west-1
  environment:
    REPORT_SETTINGS_TABLE_NAME: ${self:custom.reportSettingsTableName}
    REPORT_BUCKET_NAME: ${self:custom.reportBucketName}
  
custom:
  reportSettingsTableName: report-settings-${self:provider.stage}
  reportBucketName: aml-platform-bucket-${self:provider.stage}
  dynamodb:
    stages:
      - staging
    start: 
      migrate: true
  serverless-offline:
    stage: staging
    resourceRoutes: true
  	
  s3:
    host: 0.0.0.0
    port: 4002
    directory: /tmp/serverless-s3-offline

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-dynamodb
  - serverless-s3-local

functions:
  getReportSettings:
    handler: ./src/api/get-report-settings.handler
    name: get-report-settings
    memorySize: 128 
    timeout: 10
    events:
      - http:
          path: /report-settings/{id}
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
        Resource: !GetAtt ReportSettingsTable.Arn
  
  createReportSettings:
    handler: ./src/api/create-report-settings.handler
    name: create-report-settings
    memorySize: 128 
    timeout: 10
    events:
      - http:
          path: /report-settings
          method: POST
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
        Resource: !GetAtt ReportSettingsTable.Arn

  uploadReport:
    handler: ./src/api/upload-report.handler
    name: upload-report
    memorySize: 128 
    timeout: 10
    events:
      - http:
          path: /report
          method: POST
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "s3:PutObject"
          - "s3:GetObject"
          - "s3:ListBucket"
          - "s3:DeleteObject"
        Resource: 
          - "arn:aws:s3:::${self:custom.reportBucketName}/*"
          - "arn:aws:s3:::${self:custom.reportBucketName}"


  list-report-settings:
    handler: ./src/api/list-report-settings.handler
    name: list-report-settings
    memorySize: 128 
    timeout: 10
    events:
      - http:
          path: /report-settings
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS 
            authorizerId:
              Ref: AMLApiGatewayAuthorizer
            scopes: # Optional - List of Oauth2 scopes when type is COGNITO_USER_POOLS
              - email
              - profile

    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "dynamodb:Scan"
        Resource: !GetAtt ReportSettingsTable.Arn

resources:
  Resources:
    AmlPlatformBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.reportBucketName}
            	
    AMLApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:eu-west-1:767397742563:userpool/eu-west-1_uYBV8Nsim

    ReportSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.reportSettingsTableName}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5